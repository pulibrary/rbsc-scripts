# 
# Copyright 2013 The Trustees of Princeton University
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# local EAD schema to validate EAD files against Best Practices

# Note on dates: couldn't find a syntax to enable multi-line mode, so I just put optional line breaks in the regex wherever possible. Hope it flies (seems to).

default namespace = "urn:isbn:1-931666-22-9"
namespace xlink = "http://www.w3.org/1999/xlink"
namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"


## ead (root)
## required attribute: xsi:schemaLocation (prescribed value)
## optional attribute: audience
## required elements: eadheader, archdesc
start = EAD
EAD =
    element ead {
        attribute xsi:schemaLocation { "urn:isbn:1-931666-22-9 http://www.loc.gov/ead/ead.xsd" }
        & AudienceAttr?
        & Eadheader
        & Archdesc
    }

## @audience must be set to values "internal" or "external"
AudienceAttr =
    attribute audience {
        xsd:string { pattern = "(internal)|(external)" }
    }

## eadheader
## required attributes, all with prescribed values: repositoryencoding, countryencoding, dateencoding, langencoding, relatedencoding, scriptencoding
## required elements: eadid, filedesc, profiledesc, revisiondesc
Eadheader =
    element eadheader {
        attribute repositoryencoding { "iso15511" }
        & attribute countryencoding { "iso3166-1" }
        & attribute dateencoding { "iso8601" }
        & attribute langencoding { "iso639-2b" }
        & attribute scriptencoding { "iso15924" }
        & Eadid
        & Filedesc
        & Profiledesc
        & Revisiondesc
    }

## eadid
## required attributes: countrycode (set to "US", see below), mainagencycode, url, urn
## text; may not be empty
Eadid =
    element eadid {
        CountrycodeAttr
        & attribute mainagencycode { "US-NjP" }
        & URLAttr
        & URNAttr
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## url attribute must match arks domain and subsequent path must follow a specific pattern
URLAttr =
    attribute url {
        xsd:string { pattern = "http://arks.princeton.edu/ark:/88435/[a-z0-9]{1,9}" }
    }

## urn attribute must match a specific pattern
URNAttr =
    attribute urn {
        xsd:string { pattern = "ark:/88435/[a-z0-9]{1,9}" }
    }

## filedesc
## required elements: titlestmt, publicationstmt
Filedesc = element filedesc { Titlestmt & Publicationstmt }

## titlestmt
## required element: titeproper
## optional element: sponsor (zero or more)
Titlestmt = element titlestmt { Titleproper & Sponsor* }

## titleproper
## required element: date (one or more)
## optional element: emph (zero or more)
## may contain text
Titleproper =
    element titleproper {
        mixed { Date }+
        & Emph*
    }

## sponsor
## text; may not be empty.
Sponsor =
    element sponsor {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## publicationstmt
## required attribute: id, must be set to one of the specified values
## required elements: publisher, address, date
Publicationstmt =
    element publicationstmt {
        attribute id {
            xsd:string {
                pattern =
                    "(rbscAddress)|(muddAddress)|(LAEaddress)|(gaAddress)|(rarebooksAddress)|(engAddress)|(cotsenAddress)"
            }
        }
        & Publisher
        & Address
        & Date
    }

## id attribute
## must match pattern for component id's
IdAttr =
    attribute id {
        xsd:string {
            pattern = "\p{L}{1,6}\-?\d{1,7}\.?\d?\d?\d?\p{L}?((\.?\d?\d?)|(-?\d{1,2}))_.*"
        }
    }

## publisher
## text; may not be empty
Publisher =
    element publisher {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## address
## required element: addressline (one or more)
Address = element address { Addressline+ }

## addressline
## text; may not be empty
Addressline =
    element addressline {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## date
## optional attribute: type (zero or one)
## date must either contain text and @normal or be set to "undated"
Date =
    element date {
        TypeAttr?
        & ((text & NormalAttr) | string "undated")
    }

## profiledesc
## required elements: creation, langusage, descrules
Profiledesc = element profiledesc { Creation & Langusage & Descrules }

## creation
## required element: date
## may contain text
Creation =
    element creation {
        mixed { Date }
    }

## langusage
## required element: language; language element requires @langcode
Langusage =
    element langusage {
        element language { LangcodeAttr }
    }

## langcode attribute
## must match ISO 639-2
LangcodeAttr =
    attribute langcode {
        xsd:string {
            pattern =
                "(aar)|(aa)|(abk)|(ab)|(ace)|(ach)|(ada)|(ady)|(afa)|(afh)|(afr)|(af)|(ain)|(aka)|(ak)|(akk)|(alb)|(sqi)|(sq)|(ale)|(alg)|(alt)|(amh)|(am)|(ang)|(anp)|(apa)|(ara)|(ar)|(arc)|(arg)|(an)|(arm)|(hye)|(hy)|(arn)|(arp)|(art)|(arw)|(asm)|(as)|(ast)|(ath)|(aus)|(ava)|(av)|(ave)|(ae)|(awa)|(aym)|(ay)|(aze)|(az)|(bad)|(bai)|(bak)|(ba)|(bal)|(bam)|(bm)|(ban)|(baq)|(eus)|(eu)|(bas)|(bat)|(bej)|(bel)|(be)|(bem)|(ben)|(bn)|(ber)|(bho)|(bih)|(bh)|(bik)|(bin)|(bis)|(bi)|(bla)|(bnt)|(bos)|(bs)|(bra)|(bre)|(br)|(btk)|(bua)|(bug)|(bul)|(bg)|(bur)|(mya)|(my)|(byn)|(cad)|(cai)|(car)|(cat)|(ca)|(cau)|(ceb)|(cel)|(cha)|(ch)|(chb)|(che)|(ce)|(chg)|(chi)|(zho)|(zh)|(chk)|(chm)|(chn)|(cho)|(chp)|(chr)|(chu)|(cu)|(chv)|(cv)|(chy)|(cmc)|(cop)|(cor)|(kw)|(cos)|(co)|(cpe)|(cpf)|(cpp)|(cre)|(cr)|(crh)|(crp)|(csb)|(cus)|(cze)|(ces)|(cs)|(dak)|(dan)|(da)|(dar)|(day)|(del)|(den)|(dgr)|(din)|(div)|(dv)|(doi)|(dra)|(dsb)|(dua)|(dum)|(dut)|(nld)|(nl)|(dyu)|(dzo)|(dz)|(efi)|(egy)|(eka)|(elx)|(eng)|(en)|(enm)|(epo)|(eo)|(est)|(et)|(ewe)|(ee)|(ewo)|(fan)|(fao)|(fo)|(fat)|(fij)|(fj)|(fil)|(fin)|(fi)|(fiu)|(fon)|(fre)|(fra)|(fr)|(frm)|(fro)|(frr)|(frs)|(fry)|(fy)|(ful)|(ff)|(fur)|(gaa)|(gay)|(gba)|(gem)|(geo)|(kat)|(ka)|(ger)|(deu)|(de)|(gez)|(gil)|(gla)|(gd)|(gle)|(ga)|(glg)|(gl)|(glv)|(gv)|(gmh)|(goh)|(gon)|(gor)|(got)|(grb)|(grc)|(gre)|(ell)|(el)|(grn)|(gn)|(gsw)|(guj)|(gu)|(gwi)|(hai)|(hat)|(ht)|(hau)|(ha)|(haw)|(heb)|(he)|(her)|(hz)|(hil)|(him)|(hin)|(hi)|(hit)|(hmn)|(hmo)|(ho)|(hsb)|(hun)|(hu)|(hup)|(iba)|(ibo)|(ig)|(ice)|(isl)|(is)|(ido)|(io)|(iii)|(ii)|(ijo)|(iku)|(iu)|(ile)|(ie)|(ilo)|(ina)|(ia)|(inc)|(ind)|(id)|(ine)|(inh)|(ipk)|(ik)|(ira)|(iro)|(ita)|(it)|(jav)|(jv)|(jbo)|(jpn)|(ja)|(jpr)|(jrb)|(kaa)|(kab)|(kac)|(kal)|(kl)|(kam)|(kan)|(kn)|(kar)|(kas)|(ks)|(kau)|(kr)|(kaw)|(kaz)|(kk)|(kbd)|(kha)|(khi)|(khm)|(km)|(kho)|(kik)|(ki)|(kin)|(rw)|(kir)|(ky)|(kmb)|(kok)|(kom)|(kv)|(kon)|(kg)|(kor)|(ko)|(kos)|(kpe)|(krc)|(krl)|(kro)|(kru)|(kua)|(kj)|(kum)|(kur)|(ku)|(kut)|(lad)|(lah)|(lam)|(lao)|(lo)|(lat)|(la)|(lav)|(lv)|(lez)|(lim)|(li)|(lin)|(ln)|(lit)|(lt)|(lol)|(loz)|(ltz)|(lb)|(lua)|(lub)|(lu)|(lug)|(lg)|(lui)|(lun)|(luo)|(lus)|(mac)|(mkd)|(mk)|(mad)|(mag)|(mah)|(mh)|(mai)|(mak)|(mal)|(ml)|(man)|(mao)|(mri)|(mi)|(map)|(mar)|(mr)|(mas)|(may)|(msa)|(ms)|(mdf)|(mdr)|(men)|(mga)|(mic)|(min)|(mis)|(mkh)|(mlg)|(mg)|(mlt)|(mt)|(mnc)|(mni)|(mno)|(moh)|(mol)|(mo)|(mon)|(mn)|(mos)|(mun)|(mus)|(mwl)|(mwr)|(myn)|(myv)|(nah)|(nai)|(nap)|(nau)|(na)|(nav)|(nv)|(nbl)|(nr)|(nde)|(nd)|(ndo)|(ng)|(nds)|(nep)|(ne)|(new)|(nia)|(nic)|(niu)|(nno)|(nn)|(nob)|(nb)|(nog)|(non)|(nor)|(no)|(nso)|(nub)|(nwc)|(nya)|(ny)|(nym)|(nyn)|(nyo)|(nzi)|(oci)|(oc)|(oji)|(oj)|(ori)|(or)|(orm)|(om)|(osa)|(oss)|(os)|(ota)|(oto)|(paa)|(pag)|(pal)|(pam)|(pan)|(pa)|(pap)|(pau)|(peo)|(per)|(fas)|(fa)|(phi)|(phn)|(pli)|(pi)|(pol)|(pl)|(pon)|(por)|(pt)|(pra)|(pro)|(pus)|(ps)|(que)|(qu)|(raj)|(rap)|(rar)|(roa)|(roh)|(rm)|(rom)|(rum)|(ron)|(ro)|(run)|(rn)|(rup)|(rus)|(ru)|(sad)|(sag)|(sg)|(sah)|(sai)|(sal)|(sam)|(san)|(sa)|(sas)|(sat)|(scc)|(srp)|(sr)|(scn)|(sco)|(scr)|(hrv)|(hr)|(sel)|(sem)|(sga)|(sgn)|(shn)|(sid)|(sin)|(si)|(sio)|(sit)|(sla)|(slo)|(slk)|(sk)|(slv)|(sl)|(sma)|(sme)|(se)|(smi)|(smj)|(smn)|(smo)|(sm)|(sms)|(sna)|(sn)|(snd)|(sd)|(snk)|(sog)|(som)|(so)|(son)|(sot)|(st)|(spa)|(es)|(srd)|(sc)|(srn)|(srr)|(ssa)|(ssw)|(ss)|(suk)|(sun)|(su)|(sus)|(sux)|(swa)|(sw)|(swe)|(sv)|(syr)|(tah)|(ty)|(tai)|(tam)|(ta)|(tat)|(tt)|(tel)|(te)|(tem)|(ter)|(tet)|(tgk)|(tg)|(tgl)|(tl)|(tha)|(th)|(tib)|(bod)|(bo)|(tig)|(tir)|(ti)|(tiv)|(tkl)|(tlh)|(tli)|(tmh)|(tog)|(ton)|(to)|(tpi)|(tsi)|(tsn)|(tn)|(tso)|(ts)|(tuk)|(tk)|(tum)|(tup)|(tur)|(tr)|(tut)|(tvl)|(twi)|(tw)|(tyv)|(udm)|(uga)|(uig)|(ug)|(ukr)|(uk)|(umb)|(und)|(urd)|(ur)|(uzb)|(uz)|(vai)|(ven)|(ve)|(vie)|(vi)|(vol)|(vo)|(vot)|(wak)|(wal)|(war)|(was)|(wel)|(cym)|(cy)|(wen)|(wln)|(wa)|(wol)|(wo)|(xal)|(xho)|(xh)|(yao)|(yap)|(yid)|(yi)|(yor)|(yo)|(ypk)|(zap)|(zen)|(zha)|(za)|(znd)|(zul)|(zu)|(zun)|(zxx)|(nqo)|(zza)"
        }
    }

## descrules
## optional element emph
## may contain text
Descrules =
    element descrules {
        mixed { Emph* }
    }

## emph
## required attribute: render
## text; may not be empty
Emph =
    element emph {
        RenderAttr
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## render attribute
## may not be empty
RenderAttr =
    attribute render {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## revisiondesc
## required element: change (one or more)
Revisiondesc = element revisiondesc { Change+ }

## change
## required elements: date, item
Change = element change { Date & Item_Change }

## item (child of change)
## text; may not be empty
Item_Change =
    element item {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## archdesc
## required attributes: type, relatedencoding, level (all with prescribed values)
## required elements: did, descgrp3, descgrp4, descgrp5, descgrp7, dao, controlaccess, dsc1
## optional elements: bioghist, descgrp6, dsc2 (all zero or one)
## order of elements is enforced
Archdesc =
    element archdesc {
        attribute type { "findingaid" },
        attribute relatedencoding { "marc21" },
        attribute level {
            xsd:string { pattern = "(collection)|(series)" }
        },
        Did_HL,
        Bioghist?,
        Descgrp3,
        Descgrp4,
        Descgrp5,
        Descgrp6?,
        Descgrp7,
        Dao,
        Controlaccess_HL,
        Dsc1,
        Dsc2?
    }

## bioghist
## required elements: either one chronlist or one or more p
## optional element: list
Bioghist = element bioghist { (Chronlist? | P*)+ & List* }

## chronlist
## required element: chronitem (one or more)
Chronlist = element chronlist { Chronitem+ }

## chronitem
## required elements: EITHER at least one date or at least one event OR at least one date or at least one eventgrp
Chronitem = element chronitem { ((Date? | Event?)+ | (Date? | Eventgrp?)+)+ }

## event
## optional element: emph (zero or more)
## may contain text
Event =
    element event {
        mixed { Emph* }
    }

## eventgrp
## required element: event (one or more)
Eventgrp = element eventgrp { Event+ }

## list
## required attribute: type
## required element: item (one or more)
List = element list { TypeAttr & Item_List+ }

## item (child of list)
## optional element: emph (zero or more)
## may contain text
Item_List =
    element item {
        mixed { Emph* }
    }

## extref
## required attributes: xlink:href, xlink:type
## optional attributes: xlink: title (zero or one)
## text; may not be empty
Extref =
    element extref {
        XlinkHrefAttr
        & XlinkTitleAttr?
        & XlinkTypeAttr
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## controlaccess on the collection level
## required elements: at least one of persname, famname, or corpname; at least one subject; at least one local subject
## optional elements: geogname, genreform, occupation (zero or more)
## order of elements is enforced
Controlaccess_HL =
    element controlaccess {
        (Persname*, Famname*, Corpname*)+,
        Subject+,
        Geogname*,
        Genreform*,
        Occupation*,
        LocalSubject+
    }

## controlaccess on the component level
## required elements: at least one of corpname, persname, geogname, subject, genreform, occupation (zero or more)
Controlaccess_dsc =
    element controlaccess {
        (Corpname* | Persname* | Geogname* | Subject* | Genreform* | Occupation*)+
    }

## corpname
## required attributes rules, source
## optional attributes role, authfilenumber, altrender (zero or one)
## optional element emph (zero or more)
## may contain text
Corpname =
    element corpname {
        (ControlledSourceAttr | UncontrolledSourceAttr)
        & RoleAttr?
        & AuthfilenumberAttr?
        & AltrenderAttr?
        & mixed { Emph* }
    }

## attribute source for controlled vocabularies
## must be set to "local", "LAE", or one of the approved authority file codes
ControlledSourceAttr =
attribute source {
        xsd:string {
            pattern =
                "(lcnaf)|(lcsh)|(local)|(LAE)|(aat)|(gmgpc)|(ftamc)|(tgn)|(tgm)|(viaf)"
        }
    } 

## attribute rules is required when @source is set to "uncontrolled"
## value must be set to "rda"
UncontrolledSourceAttr = 
(attribute rules {xsd:string {pattern = "rda"}} & attribute source {xsd:string {pattern = "uncontrolled"}})

## attribute authfilenumber
## must match either a url pattern or a local subject heading pattern
AuthfilenumberAttr =
    attribute authfilenumber {
        xsd:string { pattern = "http://.*|t\d{1,2}" }
    }

## persname
## required attributes: rules, source
## optional attributes: role, authfilenumber, altrender
## text; may not be empty
Persname =
    element persname {
        (ControlledSourceAttr | UncontrolledSourceAttr)
        & RoleAttr?
        & AuthfilenumberAttr?
        & AltrenderAttr?
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## geogname
## required attributes: rules, source
## text: may not be empty
Geogname =
    element geogname {
        (ControlledSourceAttr | UncontrolledSourceAttr)
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## subject
## required attributes: rules, source
## optional attribute: authfilenumber
## text: may not be empty
Subject =
    element subject {
        (ControlledSourceAttr | UncontrolledSourceAttr)
        & AuthfilenumberAttr?
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## subject for local subject headings
## required attributes: encodinganalog (set to "690"), rules, source, authfilenumber
## text; may not be empty
LocalSubject =
    element subject {
        attribute encodinganalog { "690" }
        & (ControlledSourceAttr | UncontrolledSourceAttr)
        & AuthfilenumberAttr
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## genreform
## required attributes: rules, source
## text; may not be empty
Genreform =
    element genreform {
        (ControlledSourceAttr | UncontrolledSourceAttr)
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## occupation
## required attributes: rules, source
## text; may not be empty
Occupation =
    element occupation {
        (ControlledSourceAttr | UncontrolledSourceAttr)
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## dao
## required attributes: xslink:href, xlink:type
## optional attributes: xlink:title, xlink:role
Dao = element dao { XlinkHrefAttr & XlinkTitleAttr? & XlinkRoleAttr? & XlinkTypeAttr }

## attribute xlink:href
## value must match pattern for findingaids site, general url, or image file (surrogate pointer pattern to be added)
XlinkHrefAttr =
    attribute xlink:href {
        xsd:string {
            pattern =
                "(findingaids\.princeton\.edu.*)|(http.*)|(bioghist-images.*)|(msslogo.*)|(shieldlogo.*)|(laelogo.*)"
        }
    }

## attribute xlink:tite
## may not be empty
XlinkTitleAttr =
    attribute xlink:title {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## attribute xlink:role
## must match METS pattern
XlinkRoleAttr =
    attribute xlink:role {
        xsd:string { pattern = "http://www.loc.gov/METS/" }
    }

## attribute xlink:type
## must be set to "simple"
XlinkTypeAttr =
    attribute xlink:type {
        xsd:string { pattern = "simple" }
    }

## descgrp for DACS ch.3 elements
## required attribute: id (set to "dacs3")
## required element: scopecontent
## optional element: arrangement (zero or one)
## order of elements is enforced
Descgrp3 =
    element descgrp {
        attribute id { "dacs3" },
        Scopecontent_HL,
        Arrangement?
    }

## descgrp for DACS ch.4 elements
## required attribute: id (set to "dacs4")
## required elements: accessrestrict (one or more), userestrict
## optional elements: phystech, otherfindaid (zero or one)
## order of elements is enforced
Descgrp4 =
    element descgrp {
        attribute id { "dacs4" },
        Accessrestrict+,
        Phystech?,
        Userestrict,
        Otherfindaid?
    }

## descgrp for DACS ch.5 elements
## required attribute: id (set to "dacs5")
## required elements: acqinfo, appraisal
## optional elements: custodhist, separatedmaterial, accruals (zero or one)
## order of elements is enforced
Descgrp5 =
    element descgrp {
        attribute id { "dacs5" },
        Custodhist?,
        Acqinfo,
        Appraisal,
        Separatedmaterial?,
        Accruals?
    }

## descgrp for DACS ch.6 elements
## required attribute: id (set to "dacs6")
## optional elements: bibliography (zero or more); originalsloc, altformavail, relatedmaterial (zero or one)
## order of elements is enforced
Descgrp6 =
    element descgrp {
        attribute id { "dacs6" },
        Originalsloc?,
        Altformavail?,
        Relatedmaterial?,
        Bibliography*
    }

## descgrp for DACS ch.7 elements
## required attribute: id (set to "dacs7")
## required elements: prefercite; processinfo (one or more)
## optional elements: bibliography, note (zero or more)
Descgrp7 =
    element descgrp {
        attribute id { "dacs7" }
        & Note*
        & Processinfo+
        & Prefercite        
        & Bibliography*
    }

## scopecontent
## required element: p (one or more)
Scopecontent_HL = element scopecontent { P+ }

## arrangement
## required element: p (one or more)
Arrangement = element arrangement { P+ }

## accessrestrict
## required attribute: type (set to open, closed, remotestorage, or curatorreview; cannot be empty)
## required element: p (one or more)
Accessrestrict =
    element accessrestrict {
        attribute type { "open"? | "closed"? | "remotestorage"? | "curatorreview"? }+
        & P+
    }

## userestrict
## required element: p (one or more)
Userestrict = element userestrict { P+ }

## phystech
## required element: p (one or more)
Phystech = element phystech { P+ }

## otherfindaid
## required element: p (one or more)
Otherfindaid = element otherfindaid { P+ }

## custodhist
## required element: p (one or more)
Custodhist = element custodhist { P+ }

## acqinfo
## ## required element: p (one or more)
Acqinfo = element acqinfo { P+ }

## appraisal
## required element: p (one or more)
Appraisal = element appraisal { P+ }

## separatedmaterial
## required element: p (one or more)
Separatedmaterial = element separatedmaterial { P+ }

## accruals
## required element: p (one or more)
Accruals = element accruals { P+ }

## originalsloc
## required element: p (one or more)
Originalsloc = element originalsloc { P+ }

## altformavail
## required element: p (either containing text or containing attribute type set to "accesscopies" and extptr with attribute xlink:href) 
Altformavail =
    element altformavail {
        P+
        | (attribute type { "accesscopies" }
           & element p {
                 element extptr {
                     attribute xlink:href {
                         xsd:string { pattern = "[\w+\p{P}*]+" }
                     }
                 }
             })
    }

## relatedmaterial
## required element: p (one or more)
Relatedmaterial = element relatedmaterial { P+ }

## bibliography
## required element: p (one or more)
Bibliography = element bibliography { P+ }

## p
## text; may contain emph, date, extref, or name (zero or more)
P =
    element p {
        mixed { Emph* & Date* & Extref* & Name* }
    }

## note
## required element: p (one or more)
Note = element note { P+ }

## processinfo
## required attribute: id (set to "processing" or "conservation")
## required element: p (one or more)
Processinfo =
    element processinfo {
        attribute id { "processing" | "conservation" }
        & P+
    }

## name
## optional attribute: role
## text; may not be empty
Name =
    element name {
        RoleAttr?
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## attribute role
## may not be empty
RoleAttr =
    attribute role {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## prefercite
## required element: p (one or more)
Prefercite = element prefercite { P+ }

## did on the collection level
## required elements: unitid, unitdate, origination, physloc with @type set to "code" (one or more); repository, unittitle, physdesc, langmaterial, abstract
## optional element: physloc with @type set to "text"
## order of elements is enforced
Did_HL =
    element did {
        Unitid_HL+,
        Repository,
        Unittitle,
        Unitdate+,
        Physdesc,
        Origination+,
        Langmaterial,
        Abstract,
        Physloc_Code+,
        Physloc_Text?
    }

## unitid on the collection level
## required attributes: countrycode, repositorycode (set to "US-NjP"), type
## text; may not be empty
Unitid_HL =
    element unitid {
        CountrycodeAttr
        & attribute repositorycode { "US-NjP" }
        & TypeAttr
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## attribute countrycode
## must be set to "US"
CountrycodeAttr = attribute countrycode { "US" }

## attribute type
## may not be empty
TypeAttr =
    attribute type {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## unittitle
## optional attribute: altrender (zero or one)
## text; may contain emph
Unittitle =
    element unittitle {
        AltrenderAttr?
        & mixed { Emph* }
    }

## attribute normal
## must conform to ISO 8601
NormalAttr =
    attribute normal {
        xsd:string {
            pattern =
                "(\-?(0|1|2)([0-9]{3})(((01|02|03|04|05|06|07|08|09|10|11|12)((0[1-9])|((1|2)[0-9])|(3[0-1])))|\-((01|02|03|04|05|06|07|08|09|10|11|12)(\-((0[1-9])|((1|2)[0-9])|(3[0-1])))?))?)(/\-?(0|1|2)([0-9]{3})(((01|02|03|04|05|06|07|08|09|10|11|12)((0[1-9])|((1|2)[0-9])|(3[0-1])))|\-((01|02|03|04|05|06|07|08|09|10|11|12)(\-((0[1-9])|((1|2)[0-9])|(3[0-1])))?))?)?"
        }
    }

## abstract
## text; may contain emph
Abstract =
    element abstract {
        mixed { Emph* }
    }

## origination
## optional attributes: altrender
## required elements: must contain at least one of corpname, persname, or famname
Origination = element origination { (Corpname? | Persname? | Famname?)+ & AltrenderAttr? }

## famname
## required attributes: source, rules
## optional attributes: altrender, role, authfilenumber
## text; may not be empty
Famname =
    element famname {
        AltrenderAttr?
        & (ControlledSourceAttr | UncontrolledSourceAttr)
        & RoleAttr?
        & AuthfilenumberAttr?
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## attribute altrender
## may not be empty
AltrenderAttr =
    attribute altrender {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## extent
## optional attributes: type, unit
## text; may not be empty
Extent =
    element extent {
        TypeAttr?
        & UnitAttr?
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## attribute unit
## may not be empty
UnitAttr =
    attribute unit {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## dimensions
## text; may not be empty
Dimensions =
    element dimensions {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## physfacet
## text; may not be empty
Physfacet =
    element physfacet {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## physloc for location code
## required attribute: type (set to "code")
## must match one of the location codes
Physloc_Code =
    element physloc {
        attribute type { "code" }+
        & xsd:string {
              pattern =
                  "(mss)|(rcpxr)|(flm)|(flmp)|(rcppf)|(ex)|(gax)|(wa)|(rcpph)|(rcpxg)|(rcpxm)|(anxb)|(mudd)|(hsvc)|(hsvg)|(hsvr)|(hsvm)|(ctsn)|(thx)|(st)|(rcpxc)"
          }
    }

## physloc for free text
## required attribute: text (set to "text")
## text; may not be empty
Physloc_Text =
    element physloc {
        attribute type { "text" }
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## repository
## required attribute: id (set to one of the reporitory codes or "other")
## required element: address
## optional elements: corpname, subarea (zero or more)
Repository =
    element repository {
        attribute id {
            "mss"
            | "lae"
            | "eng"
            | "rarebooks"
            | "ga"
            | "univarchives"
            | "publicpolicy"
            | "cotsen"
            | "other"
        }
        & Address
        & Corpname*
        & Subarea*
    }

## subarea
## text; may not be empty
Subarea =
    element subarea {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## dsc[1]
## required attribute: type (set to "combined")
## required element: at least one c of series, subgroup, or file level
Dsc1 =
    element dsc {
        attribute type { "combined" }
        & (C_Series | C_Subgrp | C_FileAndBelow)+
    }

## dsc[2]
## required attributes: type (set to "othertype"), othertype (set to "physicalholdings")
## required element: at least one c as specified for use in dsc[2]
Dsc2 =
    element dsc {
        attribute type { "othertype" }
        & attribute othertype { "physicalholdings" }
        & C2+
    }

## c as specified for use in dsc[2]
## required attributes: level (set to "otherlevel"), otherlevel (set to "physicalitem"), id (may not be empty)
## required element: did as specified for use in dsc[2]
C2 =
    element c {
        attribute level { "otherlevel" }
        & attribute otherlevel { "physicalitem" }
        & attribute id {
              xsd:string { pattern = "[\w+\s*\p{P}*]+" }
          }
        & Did_Dsc2
    }

## did as specified for use in dsc[2]
## required elements: container as specified for use in dsc[2], physloc for code, unitid for barcode
## optional element: physloc for text
Did_Dsc2 = element did { Container_Dsc2, Barcode, Physloc_Code, Physloc_Text? }

## c for file level and below
## required attributes: level (set to "file", "item", or "otherlevel"), id
## optional attribute: otherlevel
## required element: did for dsc[1]
## optional elements: accessrestrict, altformavail, bibliography, controlaccess, custodhist, phystech, relatedmaterial, userestrict, recursive c (zero or more); acquinfo, arrangement, bioghist, scopecontent (zero or one)
C_FileAndBelow =
    element c {
        IdAttr
        & attribute level { string "file" | "item" | "otherlevel" }
        & OtherlevelAttr?
        & Did_Dsc1
        & Accessrestrict*
        & Acqinfo?
        & Altformavail*
        & Arrangement?
        & Bibliography*
        & Bioghist?
        & Controlaccess_dsc*
        & Custodhist*
        & Phystech*
        & Relatedmaterial*
        & Scopecontent_Dsc?
        & Userestrict*
        & C_FileAndBelow*
    }

## c for subgrp level
## required attributes: id, level (set to "subgrp")
## optional attribute: otherlevel
## required elements: did for dsc[1], scopecontent, arrangement
## optional elements: accessrestrict, altformavail, bibliography, controlaccess, custodhist, phystech, relatedmaterial, userestrict, c for series (zero or more); acquinfo, bioghist (zero or one)
C_Subgrp =
    element c {
        IdAttr
        & attribute level { string "subgrp" }
        & OtherlevelAttr?
        & Did_Dsc1
        & Accessrestrict*
        & Acqinfo?
        & Altformavail*
        & Arrangement
        & Bibliography*
        & Bioghist?
        & Controlaccess_dsc*
        & Custodhist*
        & Phystech*
        & Relatedmaterial*
        & Scopecontent_Dsc
        & Userestrict*
        & (C_Series*)*
    }

## c for series level
## required attributes: id, level (set to "series")
## optional attribute: otherlevel
## required elements: did for dsc[1], scopecontent, arrangement
## optional elements: accessrestrict, altformavail, bibliography, controlaccess, custodhist, phystech, relatedmaterial, userestrict, c for file or subseries (zero or more); acquinfo, bioghist, (zero or one)
C_Series =
    element c {
        IdAttr
        & attribute level { string "series" }
        & OtherlevelAttr?
        & Did_Dsc1
        & Accessrestrict*
        & Acqinfo?
        & Altformavail*
        & Arrangement
        & Bibliography*
        & Bioghist?
        & Controlaccess_dsc*
        & Custodhist*
        & Phystech*
        & Relatedmaterial*
        & Scopecontent_Dsc
        & Userestrict*
        & (C_FileAndBelow* | C_Subseries*)*
    }

## c for subseries level
## required attributes: id, level (set to "subseries")
## optional attribute: otherlevel
## required elements: did for dsc[1], scopecontent, arrangement
## optional elements: accessrestrict, altformavail, bibliography, controlaccess, custodhist, phystech, relatedmaterial, userestrict, c for file (zero or more); acquinfo, bioghist (zero or one)
C_Subseries =
    element c {
        IdAttr
        & attribute level { string "subseries" }
        & OtherlevelAttr?
        & Did_Dsc1
        & Accessrestrict*
        & Acqinfo?
        & Altformavail*
        & Arrangement
        & Bibliography*
        & Bioghist?
        & Controlaccess_dsc*
        & Custodhist*
        & Phystech*
        & Relatedmaterial*
        & Scopecontent_Dsc
        & Userestrict*
        & C_FileAndBelow*
    }

## attribute otherlevel
## must be set to text
OtherlevelAttr = attribute otherlevel { "text" }

## scopecontent for component level
## required element: at least one of list or p
Scopecontent_Dsc = element scopecontent { (List* | P*)+ }

## unitdate
## optional attribute: type
## must match either of these:
## 1) DACS-formatted value AND required attribute normal
## 2) a partial date followed by the words "no year"; the word "undated"; or the words "dates not examined"
Unitdate =
    element unitdate {
        ((xsd:string {
              pattern =
                  "(((circa\s*)*(\n)?)((\d{4}(\n)?\s*(\n)?(January|February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}\s*\.*\s*)(\n)?|(\d{4}(\n)?\s*(\n)?(January|February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\.*(\n)?\s*)(\n)?|(\d{4}(\n)?\s*(\n)?(January|February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?\.*(\n)?\s*)(\n)?|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?-(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?-\s*(\n)?\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?-\s*(\n)?\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?-(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?-(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?-(\n)?\s*(\n)?(January||February|March|April|May|June|July|August|September|October|November|December)(\n)?\s*(\n)?\d{1,2}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(((before\s*|after\s*)|((F|f)iscal\s(Y|y)ear\s))*(\n)?\d{4}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|((before\s*|after\s*)?(\n)?\d{4}(\n)?\s*(\n)?-(\n)?\s*(\n)?(before\s*|after\s*)?(\n)?\d{4}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|((before\s*|after\s*)*(\n)?\d{3}0s(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{3}0s(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{3}0s(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{3}0s(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{3}0s(\n)?\s*(\n)?-(\n)?\s*(\n)?\d{4}(\n)?\s*(\n)?\.*(\n)?\s*(\n)?)|(\d{4}s?)*(\n)?\s*(\n)?-\s*(\n)?((present)|(Present))*(\n)?\s*(\n)?\.*(\n)?\s*(\n)?|(\d{4}\s*\n*\s*((f|F)all|(A|a)utumn|(W|w)inter|(S|s)pring|(S|s)ummer)?(\s*\n*\s*-\s*\n*\s*\d{4}\s*\n*\s*((f|F)all|(A|a)utumn|(W|w)inter|(S|s)pring|(S|s)ummer)?)?)|(((F|f)all|(A|a)utumn|(W|w)inter|(S|s)pring|(S|s)ummer)?\s*\n*\s*\d{4}(\s*\n*\s*-\s*\n*\s*((F|f)all|(A|a)utumn|(W|w)inter|(S|s)pring|(S|s)ummer)?\s*\n*\s*\d{4})?)|((e|E)arly|(m|M)id|(l|L)ate)*/*((e|E)arly|(m|M)id|(l|L)ate)*\s*\d{1,2}th\scentury|(\d{4},(\n)*\s(\n)*\d{4}(\n)*\s*(\n)*-(\n)*\s*(\n)*\d{4})|(\d{4})(\n)*(\s*(\n)*-\s*(\n)*)*(\d{4})*(\n)*(,(\n)*\s)(\n)*(\d{4})*(\n)*(\s*(\n)*-\s*(\n)*)*(\d{4})*(\n)*(,*(\n)*\s(\n)*)*(\d{4})*(\n)*(\s*(\n)*-\s*(\n)*)*(\d{4})*(\n)*(,*(\n)*\s(\n)*)*(\d{4})*(\n)*(\s*(\n)*-\s*(\n)*)*(\d{4})*(\n)*(\s*\.*\s*))(\s*and\s(u|U)ndated)*)"
          }
          & NormalAttr)
         | xsd:string {
               pattern = "([\w+\s*\p{P}*]+no\syear)|((u|U)ndated)|(dates\snot\sexamined)"
           })
        & TypeAttr?
    }

## did for dsc[1]
## required elements: unittile, physdesc; unitdate (one or more)
## optional elements: unitid, abstract, container, dao, langmaterial, origination, odd (zero or more)
Did_Dsc1 =
    element did {
        Unitid_Dsc*
        & Unittitle
        & Unitdate+
        & Abstract*
        & Container_Dsc1*
        & Dao*
        & Langmaterial*
        & Origination*
        & Physdesc
        & Odd*
    }

## unitid on the component level in dsc[1]
## required attributes: type set to either "accessionnumber" or "itemnumber"
## may container either text or element pointer
## text; may not be empty
Unitid_Dsc =
    element unitid {
        attribute type { string "accessionnumber" | "itemnumber" }
        & (xsd:string { pattern = "[\w+\s*\p{P}*]+" }
           | Pointer)
    }

## unitid on the component level in dsc[2]
## required attribute: type (set to "barcode")
## value must be 14 characters long and start with "32101" (partial barcode validation)
Barcode =
    element unitid {
        attribute type { string "barcode" }
        & xsd:string { pattern = "32101\d{9}" }
    }

## container for dsc[1]
## must be in the form of either a traditional container or a pointer 
Container_Dsc1 = Container_Pointer | Container_Trad

## traditional container for dsc[1]
## required attribute: type
## optional attributes: parent, id
## text; may not be empty
Container_Trad =
    element container {
        TypeAttr
        & attribute id {xsd:string}?
        & ParentAttr?
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## container with pointer for dsc[1]
## required element: pointer
Container_Pointer = element container { Pointer }

## pointer
## required attribute: target (may not be empty)
Pointer =
    element ptr {
        attribute target {
            xsd:string { pattern = "[\w+\s*\p{P}*]+" }
        }
    }

## container for dsc[2]
## required attribute: type
## text; may not be empty
Container_Dsc2 =
    element container {
        TypeAttr
        & xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## attribute parent
## may not be empty
ParentAttr =
    attribute parent {
        xsd:string { pattern = "[\w+\s*\p{P}*]+" }
    }

## langmaterial
## required element: language (one or more) with required attribute langcode
Langmaterial =
    element langmaterial {
        element language { LangcodeAttr }+
    }

## physdesc
## required element: extent (one or more)
## optional elements: dimensions, physfacet (zero or more)
Physdesc = element physdesc { Extent+ & Dimensions* & Physfacet* }

## odd
## required attribute: id (may not be empty)
## required element: p
Odd =
    element odd {
        attribute id {
            xsd:string { pattern = "[\w+\s*\p{P}*]+" }
        }
        & P
    }
